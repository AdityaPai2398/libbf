
                             ___ __    ____  ____
                            / (_) /_  / __ )/ __/
                           / / / __ \/ __  / /_  
                          / / / /_/ / /_/ / __/  
                         /_/_/_.___/_____/_/ 
  

libBf is a header-only C++0x library of a garden variety of of Bloom filters.
Its policy-based design makes it very flexible to customize and allows for
creating new combinations of storage, hashing, and partition properties. libBf
currently supports the follwing types of Bloom filters:

    - Basic (fixed-width)
    - Bitwise
    - Spectral MI
    - Spectral RM
    - A^2
    - Stable


=============
Prerequisites
=============

    * g++ 4.6 or greater

    * CMake 2.8 or greater

    * Boost 1.46 or greater


Note that it is important to Boost with the same compiler as the tests in
libBF. Unfortunately this can take quite some effort because C++0x support is
not yet widely available. Because it can be tricky to setup the build
environment, we'll walk through an example below.

We begin with installing the Boost distribution in C++0x mode. If you are using
Mac OS X, you can skip this step and simply install Boost by creating a
MacPorts overlay with the provided Portfile (see below). For everyone else,
here we go:

    (1) In the Boost root, create a file user-config.jam in the boost root with
        the following contents:

            using darwin
                : std0x
                : "/opt/local/bin/g++"
                : <cxxflags>-std=gnu++0x
                ;

        Note that if you're not using Mac OS but another recent UNIX flavor
        instead, you must substitute the "darwin" toolset with "gcc" and skip
        step (2).

    (2) Because non-Apple compilers do not support -no-cpp-precomp, we need to
        remove this compiler flag in file tools/build/v2/tools/darwin.jam. In
        line 485, change

            flags darwin.compile OPTIONS : -no-cpp-precomp -gdwarf-2 ;

        to

            flags darwin.compile OPTIONS : -gdwarf-2 ;

    (3) Now build Boost with
            
            ./bootstrap.sh
            ./bjam --with-toolset=darwin-std0x
    
        If you are using another UNIX-based OS, change the toolset to
        gcc-std0x.

If you are on Mac OS and prefer to install Boost conveniently via the MacPorts
package system, you can use the provided overlay in aux/macports. (If you're
using MacPorts version less than or equal to 1.92, you need to apply a patch to
recognize gcc 4.6 as well [1].) Brief instructions on how to install an overlay
are in aux/macports/README or in more detail at the MacPorts web site [2].
After installing the overlay, you can install Boost with

    sudo port install boost +debug +std0x -universal


============
Installation
============

After all prerequisites are met, we can build the shipped test suite and
evaluation tools using the following steps:

    mkdir build
    cd build
    cmake ..
    make -j 4

    ./test/unit
    ./test/bf -h


=====
Usage
=====

The following steps show how to use libBf with your own application. All Bloom
filters have (at least) one core. The core is combination of store, hash, and
partition policy. For example, to define a core with fixed-width storage,
double hashing, and partitioning, one would use:

    typedef core<
        fixed_width<uint8_t, std::allocator<uint8_t>
      , double_hashing<default_hasher, 42, 4711>
      , no_partitioning
    > my_core;

Next, we plug the core into the Bloom filter:

      typedef basic<my_core> my_bloom_filter;

Now we can instantiate the Bloom filter. The constructor takes an rvalue
reference to a core:

    my_bloom_filter bf({ 1 << 10, 5, 4 });

That's it, now we can use the Bloom filter as follows:

    bf.add("foo")
    bf.add("foo")
    bf.add('z')
    bf.add(3.14159)
    std::cout << bf.count("foo") << std::endl;  // returns 2

libBf laso ships with a unit test suite and a little Bloom filter test tool
"bf".  This command-line program allows you to select one of the Bloom filter
implementations, feed it with data via stdin, and finally execute queries after
the set has been populated.

==========
References
==========
[1] http://trac.macports.org/changeset/71487
[2] http://guide.macports.org/#development.local-repositories
